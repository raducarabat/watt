services:
    traefik:
        image: traefik:v3.3
        command:
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
        ports:
            - "80:80"
            - "8090:8080"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - traefik-network
    
    postgres-auth:
        image: postgres:18-alpine
        restart: always
        environment:
            POSTGRES_DB: ${POSTGRES_AUTH_DB}
            POSTGRES_USER: ${POSTGRES_AUTH_USER}
            POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
        volumes:
            - pgdata_auth:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_AUTH_PORT}:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_AUTH_USER} -d ${POSTGRES_AUTH_DB}"]
            interval: 1s
            timeout: 5s
            retries: 10
        networks:
            - traefik-network

    auth-svc:
        build: ./auth-svc
        environment:
            - DATABASE_URL=postgres://${POSTGRES_AUTH_USER}:${POSTGRES_AUTH_PASSWORD}@postgres-auth:5432/${POSTGRES_AUTH_DB}
            - RUST_LOG=info
            - JWT_SECRET= ${JWT_SECRET}
            - JWT_ISSUER= ${JWT_ISSUER}
            - JWT_AUDIENCE= ${JWT_AUDIENCE}
            - ACCESS_TOKEN_TTL_SECONDS= ${ACCESS_TOKEN_TTL_SECONDS}
        depends_on:
            postgres-auth:
                condition: service_healthy
        labels:
            - "traefik.enable=true"
            
            - "traefik.http.routers.auth-public.rule=PathPrefix(`/auth/register`) || PathPrefix(`/auth/login`) || PathPrefix(`/auth/health`) || PathPrefix(`/auth/test-device`)"
            - "traefik.http.routers.auth-public.entrypoints=web"
            - "traefik.http.routers.auth-public.middlewares=strip-auth-prefix"
            - "traefik.http.routers.auth-public.service=auth"
            
            - "traefik.http.routers.auth-protected.rule=PathPrefix(`/auth`) && !PathPrefix(`/auth/register`) && !PathPrefix(`/auth/login`) && !PathPrefix(`/auth/health`) && !PathPrefix(`/auth/test-device`)"
            - "traefik.http.routers.auth-protected.entrypoints=web"
            - "traefik.http.routers.auth-protected.middlewares=jwt-auth@docker,strip-auth-prefix"  
            - "traefik.http.routers.auth-protected.service=auth"
            
            - "traefik.http.services.auth.loadbalancer.server.port=8080"
            
            - "traefik.http.middlewares.jwt-auth.forwardauth.address=http://auth-svc:8080/verify-token"
            - "traefik.http.middlewares.jwt-auth.forwardauth.authResponseHeaders=X-User-Id,X-User-Email"
            - "traefik.http.middlewares.strip-auth-prefix.stripprefix.prefixes=/auth"
        networks:
            - traefik-network

    postgres-device:
        image: postgres:18-alpine
        restart: always
        environment:
            POSTGRES_DB: ${POSTGRES_DEVICE_DB}
            POSTGRES_USER: ${POSTGRES_DEVICE_USER}
            POSTGRES_PASSWORD: ${POSTGRES_DEVICE_PASSWORD}
        volumes:
            - pgdata_device:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_DEVICE_PORT}:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_DEVICE_USER} -d ${POSTGRES_DEVICE_DB}"]
            interval: 1s
            timeout: 5s
            retries: 10  
        networks:
            - traefik-network

    device-svc:
        build: ./device-svc
        environment:
            - DATABASE_URL=postgres://${POSTGRES_DEVICE_USER}:${POSTGRES_DEVICE_PASSWORD}@postgres-device:5432/${POSTGRES_DEVICE_DB}
            - RUST_LOG=info
        depends_on:
            postgres-device:
                condition: service_healthy
        labels:
            - "traefik.enable=true"
                        
            - "traefik.http.routers.device-protected.rule=PathPrefix(`/device`)"
            - "traefik.http.routers.device-protected.entrypoints=web"
            - "traefik.http.routers.device-protected.middlewares=jwt-auth@docker,strip-device-prefix"
            - "traefik.http.routers.device-protected.service=device"
            
            - "traefik.http.services.device.loadbalancer.server.port=8080"
            - "traefik.http.middlewares.strip-device-prefix.stripprefix.prefixes=/device"
        networks:
            - traefik-network

    postgres-user:
        image: postgres:18-alpine
        restart: always
        environment:
            POSTGRES_DB: ${POSTGRES_USER_DB}
            POSTGRES_USER: ${POSTGRES_USER_USER}
            POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
        volumes:
            - pgdata_user:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_USER_PORT}:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_USER} -d ${POSTGRES_USER_DB}"]
            interval: 1s
            timeout: 5s
            retries: 10 
        networks:
            - traefik-network

    user-svc:
        build: ./user-svc
        environment:
            - DATABASE_URL=postgres://${POSTGRES_USER_USER}:${POSTGRES_USER_PASSWORD}@postgres-user:5432/${POSTGRES_USER_DB}
            - RUST_LOG=info
        depends_on:
            postgres-user:
                condition: service_healthy
        labels:
            - "traefik.enable=true"
                        
            - "traefik.http.routers.user-protected.rule=PathPrefix(`/user`)"
            - "traefik.http.routers.user-protected.entrypoints=web"
            - "traefik.http.routers.user-protected.middlewares=jwt-auth@docker,strip-user-prefix"
            - "traefik.http.routers.user-protected.service=user"
            
            - "traefik.http.services.user.loadbalancer.server.port=8080"
            - "traefik.http.middlewares.strip-user-prefix.stripprefix.prefixes=/user"
        networks:
            - traefik-network
    
    
volumes:
    pgdata_auth:
    pgdata_device:
    pgdata_user:


networks:
    traefik-network:
        driver: bridge
